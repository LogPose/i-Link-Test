{"version":3,"sources":["Components/AddNewExampleWindow.tsx","Components/SolutionWindow.tsx","Components/TaskWindow.tsx","Components/WordsWindow.tsx","App.tsx","index.tsx"],"names":["AddNewExampleWindow","styled","div","NewTextArea","textarea","ConfirmNewExampleButton","button","DeclineNewExampleButton","NewAddNewExampleWindow","newTermRus","newTermEng","mistake","termEngHandler","termRusHandler","addNewExample","cancelAddingNewExample","value","onChange","maxLength","placeholder","onClick","SolutionWindow","Words","ResetButton","NewSolutionWindow","dragOverHandler","dragOverWordHandler","dropHandler","wordSortHandler","resetHandler","dragHandler","thatsAllFolks","solution","onDragOver","onDrop","disabled","length","map","sol","draggable","onDrag","event","id","TaskWindow","ScipButton","GoodResult","p","OkResult","BadResult","SkipCounterView","span","NewTaskWindow","currentExample","onSkip","wrongAnswers","skipCounter","resultTab","rus","WordsWindow","NewWordsWindow","backDropHandler","solutionWords","ex","AppWindow","ConfirmButton","AddNewExampleButton","animationForAnswerWindow","keyframes","NoAnswerWindow","WrongAnswerWindow","CorrectAnswerWindow","App","useQuery","query","result","data","fetching","useState","eng","examples","setExamples","setCurrentExample","answerStatus","setAnswerStatus","setSolution","hoveredWord","setHoveredWord","setSolutionWords","currentWord","setCurrentWord","setThatsAllFolks","setNewTermRus","setNewTermEng","counter","setCounter","visible","setVisible","setMistake","setWrongAnswers","setSkipCounter","useEffect","idCount","testExamples","sentenceAll","el","ru","en","Math","floor","random","count","split","sort","a","b","setTimeout","prev","word","preventDefault","stopPropagation","target","newExample","filter","answerSwitch","indexOf","includes","currentWordIndex","slice","currentIndex","splice","dropIndex","hoveredWordIndex","join","toString","utterance","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","voice","speak","client","createClient","url","ReactDOM","render","document","getElementById"],"mappings":"uPAGMA,EAAsBC,IAAOC,IAAV,qRAanBC,EAAcF,IAAOG,SAAV,mKASXC,EAA0BJ,IAAOK,OAAV,2SAgBvBC,EAA0BN,IAAOK,OAAV,0SA2DdE,EAjCoD,SAAC,GAQ7D,IAPLC,EAOI,EAPJA,WACAC,EAMI,EANJA,WACAC,EAKI,EALJA,QACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,cACAC,EACI,EADJA,uBAEA,OACE,eAACf,EAAD,WACE,cAACG,EAAD,CACEa,MAAOP,EACPQ,SAAUJ,EACVK,UAAW,IACXC,YAAY,6QAEd,cAAChB,EAAD,CACEa,MAAON,EACPO,SAAUL,EACVM,UAAW,IACXC,YAAY,8aAEd,cAACd,EAAD,CAAyBe,QAASN,EAAlC,SACGH,EAAU,mFAAoB,qDAEjC,cAACJ,EAAD,CAAyBa,QAASL,EAAlC,sDC1FAM,EAAiBpB,IAAOC,IAAV,qSAcdoB,EAAQrB,IAAOC,IAAV,+VAkBLqB,EAActB,IAAOK,OAAV,kWA8DFkB,EAjC6C,SAAC,GAStD,IARLC,EAQI,EARJA,gBACAC,EAOI,EAPJA,oBACAC,EAMI,EANJA,YACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,SAEA,OACE,eAACX,EAAD,CAAgBY,WAAYR,EAAiBS,OAAQP,EAArD,UACE,cAACJ,EAAD,CACEY,SAAUJ,GAAqC,IAApBC,EAASI,OACpChB,QAASS,EAFX,mBAMCG,EAASK,KAAI,SAACC,GAAD,OACZ,cAAChB,EAAD,CACEiB,WAAW,EAEXL,OAAQN,EACRY,OAAQ,kBAAMV,EAAYQ,IAC1BL,WAAY,SAACQ,GAAD,OAAWf,EAAoBe,EAAOH,IALpD,SAOGA,EAAItB,OALAsB,EAAII,WClFbC,EAAa1C,IAAOC,IAAV,uSAcV0C,EAAa3C,IAAOK,OAAV,gWAkBVuC,EAAa5C,IAAO6C,EAAV,+CAIVC,EAAW9C,IAAO6C,EAAV,+CAGRE,EAAY/C,IAAO6C,EAAV,+CAGTG,EAAkBhD,IAAOiD,KAAV,iEA+DNC,EAlDkC,SAAC,GAM3C,IALLpB,EAKI,EALJA,cACAqB,EAII,EAJJA,eACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,aACAC,EACI,EADJA,YAmCA,OACE,eAACZ,EAAD,WACGZ,EAnCa,SAACuB,GACjB,OAAqB,IAAjBA,EAEA,eAACT,EAAD,0RACuD,uBACrD,eAACI,EAAD,uHACuBM,EADvB,gDAKsB,IAAjBD,GAAuC,IAAjBA,EAE7B,eAACP,EAAD,iHACqB,iCAASO,IAD9B,2HAEa,uBACX,eAACL,EAAD,uHACuBM,EADvB,gDAKKD,GAAgB,EAEvB,eAACN,EAAD,iHACqB,iCAASM,IAD9B,8IAEW,uBACT,eAACL,EAAD,uHACuBM,EADvB,qDALC,EAeYC,CAAUF,GAAgBF,EAAeK,IAC1D,cAACb,EAAD,CAAYT,WAAUJ,EAA8BX,QAASiC,EAA7D,sB,QCjGA/B,EAAQrB,IAAOC,IAAV,+VAkBLwD,EAAczD,IAAOC,IAAV,0SAiDFyD,EA3BuC,SAAC,GAMhD,IALL7B,EAKI,EALJA,YACAL,EAII,EAJJA,gBACAmC,EAGI,EAHJA,gBACAlC,EAEI,EAFJA,oBACAmC,EACI,EADJA,cAEA,OACE,cAACH,EAAD,CAAazB,WAAYR,EAAiBS,OAAQ0B,EAAlD,SACE,cAAC,IAAD,UACGC,EAAcxB,KAAI,SAACyB,GAClB,OACE,cAAC,EAAD,CAEEvB,WAAW,EACXC,OAAQ,kBAAMV,EAAYgC,IAC1B7B,WAAY,SAACQ,GAAD,OAAWf,EAAoBe,EAAOqB,IAJpD,SAMGA,EAAG9C,OALC8C,EAAGpB,YCjDhBqB,GAAY9D,IAAOC,IAAV,sPAaT8D,GAAgB/D,IAAOK,OAAV,2UAiBb2D,GAAsBhE,IAAOK,OAAV,2UAiBnB4D,GAA2BC,YAAH,yKAexBC,GAAiBnE,IAAOC,IAAV,wZAgBLgE,IAITG,GAAoBpE,YAAOmE,GAAPnE,CAAH,yHAMjBqE,GAAsBrE,YAAOmE,GAAPnE,CAAH,mGAkaVsE,OA7Zf,WACE,IASA,EAAiCC,YAAS,CACxCC,MAVgB,iQASlB,mBAAOC,EAAP,KAIQC,GAJR,KAI2BD,EAAnBC,MAAMC,EAAaF,EAAbE,SAEd,EAAgCC,mBAAS,CACvC,CACEnC,GAAI,EACJe,IAAK,GACLqB,IAAK,MAJT,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,EAA4CH,mBAIzC,CAAEnC,GAAI,EAAGe,IAAK,GAAIqB,IAAK,KAJ1B,mBAAO1B,EAAP,KAAuB6B,EAAvB,KAMA,EAAwCJ,mBAAiB,IAAzD,mBAAOK,EAAP,KAAqBC,EAArB,KAEA,EAAgCN,mBAA0C,IAA1E,mBAAO7C,EAAP,KAAiBoD,EAAjB,KAEA,EAAsCP,mBACpC,CAAE7D,MAAO,GAAI0B,GAAI,IADnB,mBAAO2C,EAAP,KAAoBC,EAApB,KAIA,EAA0CT,mBAExC,IAFF,mBAAOhB,EAAP,KAAsB0B,EAAtB,KAIA,EAAsCV,mBACpC,CAAE7D,MAAO,GAAI0B,GAAI,IADnB,mBAAO8C,EAAP,KAAoBC,EAApB,KAIA,EAA0CZ,oBAAkB,GAA5D,mBAAO9C,EAAP,KAAsB2D,EAAtB,KAEA,EAAoCb,mBAAiB,IAArD,mBAAOpE,EAAP,KAAmBkF,EAAnB,KAEA,EAAoCd,mBAAiB,IAArD,mBAAOnE,EAAP,KAAmBkF,EAAnB,KAEA,GAA8Bf,mBAAiB,KAA/C,qBAAOgB,GAAP,MAAgBC,GAAhB,MAEA,GAA8BjB,oBAAkB,GAAhD,qBAAOkB,GAAP,MAAgBC,GAAhB,MAEA,GAA8BnB,oBAAkB,GAAhD,qBAAOlE,GAAP,MAAgBsF,GAAhB,MAEA,GAAwCpB,mBAAiB,GAAzD,qBAAOvB,GAAP,MAAqB4C,GAArB,MAEA,GAAsCrB,mBAAiB,GAAvD,qBAAOtB,GAAP,MAAoB4C,GAApB,MAEAC,qBAAU,WACR,IAAKxB,EAAU,CACb,IAAIyB,EAAU,EACRC,EAAe3B,EAAK4B,YAAYlE,KACpC,SAACmE,GACC,MAAO,CAAE9D,GAAI2D,IAAW5C,IAAK+C,EAAGC,GAAI3B,IAAK0B,EAAGE,OAGhD1B,EAAYsB,MAEb,CAAC1B,IAEJwB,qBAAU,WACgB,IAApBrB,EAAS3C,OACX6C,EAAkBF,EAAS4B,KAAKC,MAAMD,KAAKE,SAAW9B,EAAS3C,WAE/DsD,GAAiB,GACjBH,EAAiB,OAElB,CAACR,IACJqB,qBAAU,WACR,IAAIU,EAAQ,IAKZvB,EACEnC,EAAe0B,IACZiC,MAAM,KACN1E,KAAI,SAACmE,GACJ,MAAO,CAAExF,MAAOwF,EAAI9D,GAPxBoE,GAAgB,MASbE,MAAK,SAAyBC,EAAGC,GAChC,OAAID,EAAEjG,MAAQkG,EAAElG,OACN,EAENiG,EAAEjG,MAAQkG,EAAElG,MACP,EAEF,QAGZ,CAACoC,IACJgD,qBAAU,WACRe,YAAW,WACTrB,IAAW,SAACsB,GAAD,OAAkBA,EAAO,OACnC,OACF,CAACvD,IAEJ,IAAM/B,GAAc,SAACuF,GACnB5B,EAAe4B,IAGX5F,GAAkB,SAACgB,GACvBA,EAAM6E,kBAGF5F,GAAsB,SAC1Be,EACAH,GAEAG,EAAM6E,iBACN7E,EAAM8E,kBACNjC,EAAehD,IA4OjB,OACE,eAACyB,GAAD,WACGgC,GACC,cAAC,EAAD,CACEpF,QAASA,GACTD,WAAYA,EACZD,WAAYA,EACZI,eA/Fe,SAAC4B,GACtB,IAAI+E,EAAS/E,EAAM+E,OACnB7B,EAAc6B,EAAOxG,QA8FfJ,eA3Fe,SAAC6B,GACtB,IAAI+E,EAAS/E,EAAM+E,OACnB5B,EAAc4B,EAAOxG,QA0FfF,cAvFc,WAQpB,GAPAgF,IAAW,SAACsB,GAAD,OAAUA,EAAO,KACF,IAAtB3G,EAAW2B,QAAsC,IAAtB1B,EAAW0B,SACxC6D,IAAW,GACXkB,YAAW,WACTlB,IAAW,KACV,MAEqB,IAAtBxF,EAAW2B,QAAsC,IAAtB1B,EAAW0B,OAAc,CACtD,IAAIqF,EAAa,CAAE/E,GAAImD,GAASpC,IAAKhD,EAAYqE,IAAKpE,GACtDsE,GAAY,SAACoC,GAAD,4BAAcA,GAAd,CAAoBK,OAChCrC,EAAY,IACZY,IAAW,GACXJ,EAAc,IACdD,EAAc,IACdD,GAAiB,KAyEb3E,uBArEuB,WAC7BiF,IAAW,GACXJ,EAAc,IACdD,EAAc,OAoER,KACJ,uMACA,cAAC,EAAD,CACEtC,OApEc,WAClB8C,IAAe,SAACiB,GAAD,OAAUA,EAAO,KAChCpC,GAAY,SAACoC,GAAD,OAAUA,EAAKM,QAAO,SAAC5D,GAAD,OAAQA,EAAGpB,KAAOU,EAAeV,SACnE0C,EAAY,KAkERhC,eAAgBA,EAChBrB,cAAeA,EACfuB,aAAcA,GACdC,YAAaA,KA1CE,SAAC2B,GACpB,OAAQA,GACN,IAAK,KACH,OACE,cAACd,GAAD,UACE,wLAGN,IAAK,QACH,OACE,cAACC,GAAD,UACE,wNAGN,IAAK,UACH,OACE,cAACC,GAAD,UACE,6KA2BLqD,CAAazC,GACd,cAAC,EAAD,CACEnD,cAAeA,EACfC,SAAUA,EACVH,aAxEe,WACnBuD,EAAY,IACZG,EACEnC,EAAe0B,IACZiC,MAAM,KACN1E,KAAI,SAACmE,GACJ,MAAO,CAAExF,MAAOwF,EAAI9D,GAAIU,EAAe0B,IAAIiC,MAAM,KAAKa,QAAQpB,OAE/DQ,MAAK,SAAyBC,EAAGC,GAChC,OAAID,EAAEjG,MAAQkG,EAAElG,OACN,EAENiG,EAAEjG,MAAQkG,EAAElG,MACP,EAEF,OA0DTc,YAAaA,GACbL,gBAAiBA,GACjBC,oBAAqBA,GACrBC,YArPc,SAACc,GAGnB,GAFAA,EAAM8E,kBACN9E,EAAM6E,iBACFtF,EAAS6F,SAASrC,IAAgB3B,EAAcgE,SAASrC,GAAc,CACzEJ,GAAY,SAACgC,GAAD,4BAAcA,GAAd,CAAoB5B,OAChC,IAAIsC,EAAmBjE,EAAc+D,QAAQpC,GAC7CD,GAAiB,SAAC6B,GAAD,4BACZA,EAAKW,MAAM,EAAGD,IADF,YAEZV,EAAKW,MAAMD,EAAmB,EAAGV,EAAKhF,iBAEtC,IACLJ,EAAS6F,SAASrC,KACjB3B,EAAcgE,SAASrC,GAExB,OAAOxD,EAEPoD,GAAY,SAACgC,GAAD,4BAAcA,GAAd,CAAoB5B,OAChC,IAAIsC,EAAmBjE,EAAc+D,QAAQpC,GAC7CD,GAAiB,SAAC6B,GAAD,4BACZA,EAAKW,MAAM,EAAGD,IADF,YAEZV,EAAKW,MAAMD,EAAmB,EAAGV,EAAKhF,eAkOzCR,gBAvQkB,SAACa,GAGvB,GAFAA,EAAM8E,kBACN9E,EAAM6E,iBACFtF,EAAS6F,SAASrC,GAAc,CAClC,IAAMwC,EAAehG,EAAS4F,QAAQpC,GACtCxD,EAASiG,OAAOD,EAAc,GAC9B,IAAME,EAAYlG,EAAS4F,QAAQvC,GACnCrD,EAASiG,OAAOC,EAAY,EAAG,EAAG1C,GAClCJ,EACEpD,EAASK,KAAI,SAACC,GACZ,OAAOA,UA+PX,cAAC,EAAD,CACEuB,cAAeA,EACf/B,YAAaA,GACbL,gBAAiBA,GACjBmC,gBAnOkB,SAACnB,GAGvB,GAFAA,EAAM8E,kBACN9E,EAAM6E,iBACFzD,EAAcgE,SAASrC,IAAgBxD,EAAS6F,SAASrC,GAAc,CACzE,IAAIsC,EAAmB9F,EAAS4F,QAAQpC,GACxCJ,GAAY,SAACgC,GAAD,4BACPA,EAAKW,MAAM,EAAGD,IADP,YAEPV,EAAKW,MAAMD,EAAmB,EAAGV,EAAKhF,aAE3C,IAAI+F,EAAmBtE,EAAc+D,QAAQvC,GACxCxB,EAAcgE,SAASxC,GAG1BE,GAAiB,SAAC6B,GAAD,4BACZA,EAAKW,MAAM,EAAGI,EAAmB,IADrB,CAEf3C,GAFe,YAGZ4B,EAAKW,MAAMI,EAAmB,EAAGf,EAAKhF,aAL3CmD,GAAiB,SAAC6B,GAAD,4BAAcA,GAAd,CAAoB5B,OAQvC2B,YAAW,WACT5B,GAAiB,SAAC6B,GAAD,OACfA,EAAKJ,MAAK,SAAyBC,EAAGC,GACpC,OAAID,EAAEjG,MAAQkG,EAAElG,OACN,EAENiG,EAAEjG,MAAQkG,EAAElG,MACP,EAEF,UAGV,SACE,IACL6C,EAAcgE,SAASrC,KACtBxD,EAAS6F,SAASrC,GAEnB,OAAO3B,EAEP,IAAIiE,EAAmB9F,EAAS4F,QAAQpC,GACxCJ,GAAY,SAACgC,GAAD,4BACPA,EAAKW,MAAM,EAAGD,IADP,YAEPV,EAAKW,MAAMD,EAAmB,EAAGV,EAAKhF,aAE3C,IAAI+F,EAAmBtE,EAAc+D,QAAQvC,GACxCxB,EAAcgE,SAASxC,GAG1BE,GAAiB,SAAC6B,GAAD,4BACZA,EAAKW,MAAM,EAAGI,EAAmB,IADrB,CAEf3C,GAFe,YAGZ4B,EAAKW,MAAMI,EAAmB,EAAGf,EAAKhF,aAL3CmD,GAAiB,SAAC6B,GAAD,4BAAcA,GAAd,CAAoB5B,OASvC2B,YAAW,WACT5B,GAAiB,SAAC6B,GAAD,OACfA,EAAKJ,MAAK,SAAyBC,EAAGC,GACpC,OAAID,EAAEjG,MAAQkG,EAAElG,OACN,EAENiG,EAAEjG,MAAQkG,EAAElG,MACP,EAEF,UAGV,OAkKDU,oBAAqBA,KAEvB,cAACsC,GAAD,CACE7B,SAAUJ,GAAyC,IAAxBmD,EAAa9C,OACxChB,QAlKgB,WACpB,GAAwB,IAApBY,EAASI,OACX+C,EAAgB,MAChBgC,YAAW,WACThC,EAAgB,MACf,UACE,GACLnD,EACGK,KAAI,SAACmE,GACJ,OAAOA,EAAGxF,SAEXoH,KAAK,KACLC,aAAejF,EAAe0B,IACjC,CACA,IAAIwD,EAAY,IAAIC,yBAAyBnF,EAAe0B,KACxD0D,EAASC,OAAOC,gBAAgBC,YACpCL,EAAUM,MAAQJ,EAAO,GACzBE,gBAAgBG,MAAMP,GACtBtD,GAAY,SAACoC,GAAD,OAAUA,EAAKM,QAAO,SAAC5D,GAAD,OAAQA,EAAGpB,KAAOU,EAAeV,SACnE0C,EAAY,IACZD,EAAgB,WAChBgC,YAAW,WACThC,EAAgB,MACf,UAEHA,EAAgB,SAChBe,IAAgB,SAACkB,GAAD,OAAUA,EAAO,KACjCD,YAAW,WACThC,EAAgB,MACf,MAmIH,oEAMA,cAAClB,GAAD,CAAqB7C,QAxEF,WACrB4E,IAAW,IAuET,uG,SCtfA8C,GAASC,aAAa,CAC1BC,IAAK,uCAGPC,IAASC,OACP,cAAC,IAAD,CAAUlI,MAAO8H,GAAjB,SACE,cAAC,GAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.2afb071d.chunk.js","sourcesContent":["import React, { ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nconst AddNewExampleWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: rgb(147, 255, 156);\n  z-index: 2;\n  margin-left: 50%;\n  left: -200px;\n  box-shadow: 0px 0px 20px rgb(27, 138, 92);\n  border-radius: 30px;\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst NewTextArea = styled.textarea`\n  width: 350px;\n  height: 170px;\n  resize: none;\n  outline: none;\n  border: 2px rgba(7, 116, 31, 0.9) solid;\n  margin-top: 20px;\n`;\n\nconst ConfirmNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(103, 236, 91, 0.801);\n  }\n  :active {\n    background-color: rgba(43, 211, 28, 0.801);\n  }\n`;\n\nconst DeclineNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\ntype AddNewExampleWindowProps = {\n  mistake: boolean;\n  newTermRus: string;\n  newTermEng: string;\n  termRusHandler(event: ChangeEvent): void;\n  termEngHandler(event: ChangeEvent): void;\n  addNewExample(): void;\n  cancelAddingNewExample(): void;\n};\n\nconst NewAddNewExampleWindow: React.FC<AddNewExampleWindowProps> = ({\n  newTermRus,\n  newTermEng,\n  mistake,\n  termEngHandler,\n  termRusHandler,\n  addNewExample,\n  cancelAddingNewExample,\n}) => {\n  return (\n    <AddNewExampleWindow>\n      <NewTextArea\n        value={newTermRus}\n        onChange={termRusHandler}\n        maxLength={150}\n        placeholder=\"Введите предложение на русском (не более 150 символов)\"\n      ></NewTextArea>\n      <NewTextArea\n        value={newTermEng}\n        onChange={termEngHandler}\n        maxLength={150}\n        placeholder=\"Введите перевод (желательно точный) предложения на английском (не более 150 символов)\"\n      ></NewTextArea>\n      <ConfirmNewExampleButton onClick={addNewExample}>\n        {mistake ? \"Заполните поля!\" : \"Добавить\"}\n      </ConfirmNewExampleButton>\n      <DeclineNewExampleButton onClick={cancelAddingNewExample}>\n        Отмена\n      </DeclineNewExampleButton>\n    </AddNewExampleWindow>\n  );\n};\n\nexport default NewAddNewExampleWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SolutionWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(145, 255, 255, 0.6);\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n  box-sizing: border-box;\n`;\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: -5px;\n  right: -15px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\ntype NewSolutionWindowProps = {\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  dropHandler(event: React.DragEvent<Element>): void;\n  wordSortHandler(event: React.DragEvent<Element>): void;\n  dragOverWordHandler(event: React.DragEvent<Element>, sol: {}): void;\n  resetHandler(): void;\n  dragHandler(sol: {}): void;\n  thatsAllFolks: boolean;\n  solution: { value: string; id: number }[];\n};\n\nconst NewSolutionWindow: React.FC<NewSolutionWindowProps> = ({\n  dragOverHandler,\n  dragOverWordHandler,\n  dropHandler,\n  wordSortHandler,\n  resetHandler,\n  dragHandler,\n  thatsAllFolks,\n  solution,\n}) => {\n  return (\n    <SolutionWindow onDragOver={dragOverHandler} onDrop={dropHandler}>\n      <ResetButton\n        disabled={thatsAllFolks || solution.length === 0}\n        onClick={resetHandler}\n      >\n        Reset\n      </ResetButton>\n      {solution.map((sol) => (\n        <Words\n          draggable={true}\n          key={sol.id}\n          onDrop={wordSortHandler}\n          onDrag={() => dragHandler(sol)}\n          onDragOver={(event) => dragOverWordHandler(event, sol)}\n        >\n          {sol.value}\n        </Words>\n      ))}\n    </SolutionWindow>\n  );\n};\n\nexport default NewSolutionWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TaskWindow = styled.div`\n  width: 360px;\n  height: 100px;\n  background-color: rgba(153, 255, 255, 0.774);\n  margin: 10px auto;\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  box-sizing: border-box;\n`;\n\nconst ScipButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: 35px;\n  right: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\nconst GoodResult = styled.p`\n  color: #59a207;\n`;\n\nconst OkResult = styled.p`\n  color: #f6971e;\n`;\nconst BadResult = styled.p`\n  color: #fb4b45;\n`;\nconst SkipCounterView = styled.span`\n  font-size: 12px;\n  color: black;\n`;\n\ntype TaskWindowProps = {\n  thatsAllFolks: boolean;\n  currentExample: { id: number; rus: string; eng: string };\n  onSkip(): void;\n  wrongAnswers: number;\n  skipCounter: number;\n};\n\nconst NewTaskWindow: React.FC<TaskWindowProps> = ({\n  thatsAllFolks,\n  currentExample,\n  onSkip,\n  wrongAnswers,\n  skipCounter,\n}) => {\n  const resultTab = (wrongAnswers: number) => {\n    if (wrongAnswers === 0) {\n      return (\n        <GoodResult>\n          Вы не допустили ни единой ошибки! Наши поздравления! <br></br>\n          <SkipCounterView>\n            Также вы пропустили {skipCounter} задач(у)\n          </SkipCounterView>\n        </GoodResult>\n      );\n    } else if (wrongAnswers === 1 || wrongAnswers === 2) {\n      return (\n        <OkResult>\n          Количество ошибок: <strong>{wrongAnswers}</strong>! Это хороший\n          результат! <br></br>\n          <SkipCounterView>\n            Также вы пропустили {skipCounter} задач(у)\n          </SkipCounterView>\n        </OkResult>\n      );\n    } else if (wrongAnswers >= 3) {\n      return (\n        <BadResult>\n          Количество ошибок: <strong>{wrongAnswers}</strong>! Давайте попробуем\n          ещё раз! <br></br>\n          <SkipCounterView>\n            Также вы пропустили {skipCounter} задач(у)\n          </SkipCounterView>\n        </BadResult>\n      );\n    }\n  };\n\n  return (\n    <TaskWindow>\n      {thatsAllFolks ? resultTab(wrongAnswers) : currentExample.rus}\n      <ScipButton disabled={thatsAllFolks ? true : false} onClick={onSkip}>\n        Skip\n      </ScipButton>\n    </TaskWindow>\n  );\n};\n\nexport default NewTaskWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FlipMove from \"react-flip-move\";\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n`;\n\nconst WordsWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(153, 197, 255, 0.774);\n  margin: 10px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n  box-sizing: border-box;\n`;\n\ntype newWordsWindowProps = {\n  dragOverWordHandler(event: React.DragEvent<Element>, sol: {}): void;\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  backDropHandler(event: React.DragEvent<Element>): void;\n  dragHandler(ex: {}): void;\n  solutionWords: { value: string; id: number }[];\n};\n\nconst NewWordsWindow: React.FC<newWordsWindowProps> = ({\n  dragHandler,\n  dragOverHandler,\n  backDropHandler,\n  dragOverWordHandler,\n  solutionWords,\n}) => {\n  return (\n    <WordsWindow onDragOver={dragOverHandler} onDrop={backDropHandler}>\n      <FlipMove>\n        {solutionWords.map((ex) => {\n          return (\n            <Words\n              key={ex.id}\n              draggable={true}\n              onDrag={() => dragHandler(ex)}\n              onDragOver={(event) => dragOverWordHandler(event, ex)}\n            >\n              {ex.value}\n            </Words>\n          );\n        })}\n      </FlipMove>\n    </WordsWindow>\n  );\n};\n\nexport default NewWordsWindow;\n","import React, { ChangeEvent, DragEvent, useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { useQuery } from \"urql\";\nimport NewAddNewExampleWindow from \"./Components/AddNewExampleWindow\";\nimport NewSolutionWindow from \"./Components/SolutionWindow\";\nimport NewTaskWindow from \"./Components/TaskWindow\";\nimport NewWordsWindow from \"./Components/WordsWindow\";\n\nconst AppWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: #fff;\n  margin-top: 20px;\n  margin-left: 50%;\n  left: -200px;\n  border-radius: 50px;\n  position: relative;\n  box-sizing: border-box;\n  text-align: center;\n`;\n\nconst ConfirmButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(126, 186, 255, 0.774);\n  }\n  :active {\n    background-color: rgba(96, 170, 255, 0.932);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst AddNewExampleButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(255, 253, 117, 0.726);\n  }\n  :active {\n    background-color: rgba(255, 251, 23, 0.726);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst animationForAnswerWindow = keyframes`\nfrom {\n  opacity: 0;\n  margin-top: -150px;\n}\nto {\n  opacity: 0;\n  margin-top: 150px;\n}\n50% {\n  opacity: 1;\n  margin-top: 10px;\n}\n`;\n\nconst NoAnswerWindow = styled.div`\n  width: 300px;\n  height: 100px;\n  background-color: rgba(66, 226, 213, 0.8);\n  font-size: 15px;\n  color: #fff;\n  display: flex;\n  margin-top: 10px;\n  left: 50px;\n  z-index: 2;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  box-sizing: border-box;\n  border-radius: 40px;\n  position: absolute;\n  animation: ${animationForAnswerWindow} 3s forwards;\n  opacity: 0;\n`;\n\nconst WrongAnswerWindow = styled(NoAnswerWindow)`\n  background-color: rgba(206, 76, 76, 0.8);\n  color: rgb(110, 11, 11);\n  font-size: 15px;\n`;\n\nconst CorrectAnswerWindow = styled(NoAnswerWindow)`\n  background-color: rgba(75, 221, 55, 0.8);\n  color: rgb(18, 94, 8);\n`;\n\nfunction App() {\n  const ExampleQuery = `\n                          query {\n                                sentenceAll {\n                                  ru\n                                  en\n                                }\n                            }\n                          `;\n\n  const [result, reexecuteQuery] = useQuery({\n    query: ExampleQuery,\n  });\n\n  const { data, fetching } = result;\n\n  const [examples, setExamples] = useState([\n    {\n      id: 1,\n      rus: \"\",\n      eng: \"\",\n    },\n  ]);\n\n  const [currentExample, setCurrentExample] = useState<{\n    id: number;\n    rus: string;\n    eng: string;\n  }>({ id: 0, rus: \"\", eng: \"\" });\n\n  const [answerStatus, setAnswerStatus] = useState<string>(\"\");\n\n  const [solution, setSolution] = useState<{ value: string; id: number }[]>([]);\n\n  const [hoveredWord, setHoveredWord] = useState<{ value: string; id: number }>(\n    { value: \"\", id: 0 }\n  );\n\n  const [solutionWords, setSolutionWords] = useState<\n    { value: string; id: number }[]\n  >([]);\n\n  const [currentWord, setCurrentWord] = useState<{ value: string; id: number }>(\n    { value: \"\", id: 0 }\n  );\n\n  const [thatsAllFolks, setThatsAllFolks] = useState<boolean>(false);\n\n  const [newTermRus, setNewTermRus] = useState<string>(\"\");\n\n  const [newTermEng, setNewTermEng] = useState<string>(\"\");\n\n  const [counter, setCounter] = useState<number>(100);\n\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const [mistake, setMistake] = useState<boolean>(false);\n\n  const [wrongAnswers, setWrongAnswers] = useState<number>(0);\n\n  const [skipCounter, setSkipCounter] = useState<number>(0);\n\n  useEffect(() => {\n    if (!fetching) {\n      let idCount = 2;\n      const testExamples = data.sentenceAll.map(\n        (el: { ru: string; en: string }) => {\n          return { id: idCount++, rus: el.ru, eng: el.en };\n        }\n      );\n      setExamples(testExamples);\n    }\n  }, [fetching]);\n\n  useEffect(() => {\n    if (examples.length !== 0) {\n      setCurrentExample(examples[Math.floor(Math.random() * examples.length)]);\n    } else {\n      setThatsAllFolks(true);\n      setSolutionWords([]);\n    }\n  }, [examples]);\n  useEffect(() => {\n    let count = 1000;\n    const uniqueIdCounter = () => {\n      count = count + 1;\n      return count;\n    };\n    setSolutionWords(\n      currentExample.eng\n        .split(\" \")\n        .map((el) => {\n          return { value: el, id: uniqueIdCounter() };\n        })\n        .sort(function compareFunction(a, b) {\n          if (a.value < b.value) {\n            return -1;\n          }\n          if (a.value > b.value) {\n            return 1;\n          }\n          return 0;\n        })\n    );\n  }, [currentExample]);\n  useEffect(() => {\n    setTimeout(() => {\n      setCounter((prev) => (prev = prev + 1));\n    }, 1000);\n  }, [solutionWords]);\n\n  const dragHandler = (word: { value: string; id: number }) => {\n    setCurrentWord(word);\n  };\n\n  const dragOverHandler = (event: DragEvent) => {\n    event.preventDefault();\n  };\n\n  const dragOverWordHandler = (\n    event: React.DragEvent<Element>,\n    sol: { id: number; value: string }\n  ) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setHoveredWord(sol);\n  };\n\n  const wordSortHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord)) {\n      const currentIndex = solution.indexOf(currentWord);\n      solution.splice(currentIndex, 1);\n      const dropIndex = solution.indexOf(hoveredWord);\n      solution.splice(dropIndex + 1, 0, currentWord);\n      setSolution(\n        solution.map((sol) => {\n          return sol;\n        })\n      );\n    } else {\n    }\n  };\n\n  const dropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord) && solutionWords.includes(currentWord)) {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    } else if (\n      solution.includes(currentWord) &&\n      !solutionWords.includes(currentWord)\n    ) {\n      return solution;\n    } else {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    }\n  };\n\n  const backDropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solutionWords.includes(currentWord) && solution.includes(currentWord)) {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      let hoveredWordIndex = solutionWords.indexOf(hoveredWord);\n      if (!solutionWords.includes(hoveredWord)) {\n        setSolutionWords((prev) => [...prev, currentWord]);\n      } else {\n        setSolutionWords((prev) => [\n          ...prev.slice(0, hoveredWordIndex + 1),\n          currentWord,\n          ...prev.slice(hoveredWordIndex + 1, prev.length),\n        ]);\n      }\n      setTimeout(() => {\n        setSolutionWords((prev) =>\n          prev.sort(function compareFunction(a, b) {\n            if (a.value < b.value) {\n              return -1;\n            }\n            if (a.value > b.value) {\n              return 1;\n            }\n            return 0;\n          })\n        );\n      }, 500);\n    } else if (\n      solutionWords.includes(currentWord) &&\n      !solution.includes(currentWord)\n    ) {\n      return solutionWords;\n    } else {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      let hoveredWordIndex = solutionWords.indexOf(hoveredWord);\n      if (!solutionWords.includes(hoveredWord)) {\n        setSolutionWords((prev) => [...prev, currentWord]);\n      } else {\n        setSolutionWords((prev) => [\n          ...prev.slice(0, hoveredWordIndex + 1),\n          currentWord,\n          ...prev.slice(hoveredWordIndex + 1, prev.length),\n        ]);\n      }\n\n      setTimeout(() => {\n        setSolutionWords((prev) =>\n          prev.sort(function compareFunction(a, b) {\n            if (a.value < b.value) {\n              return -1;\n            }\n            if (a.value > b.value) {\n              return 1;\n            }\n            return 0;\n          })\n        );\n      }, 500);\n    }\n  };\n\n  const checkSolution = () => {\n    if (solution.length === 0) {\n      setAnswerStatus(\"no\");\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    } else if (\n      solution\n        .map((el) => {\n          return el.value;\n        })\n        .join(\" \")\n        .toString() === currentExample.eng\n    ) {\n      let utterance = new SpeechSynthesisUtterance(currentExample.eng);\n      let voices = window.speechSynthesis.getVoices();\n      utterance.voice = voices[2];\n      speechSynthesis.speak(utterance);\n      setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n      setSolution([]);\n      setAnswerStatus(\"correct\");\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    } else {\n      setAnswerStatus(\"wrong\");\n      setWrongAnswers((prev) => prev + 1);\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    }\n  };\n\n  const termRusHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermRus(target.value);\n  };\n\n  const termEngHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermEng(target.value);\n  };\n\n  const addNewExample = () => {\n    setCounter((prev) => prev + 1);\n    if (newTermRus.length === 0 || newTermEng.length === 0) {\n      setMistake(true);\n      setTimeout(() => {\n        setMistake(false);\n      }, 1000);\n    }\n    if (newTermRus.length !== 0 && newTermEng.length !== 0) {\n      let newExample = { id: counter, rus: newTermRus, eng: newTermEng };\n      setExamples((prev) => [...prev, newExample]);\n      setSolution([]);\n      setVisible(false);\n      setNewTermEng(\"\");\n      setNewTermRus(\"\");\n      setThatsAllFolks(false);\n    }\n  };\n\n  const cancelAddingNewExample = () => {\n    setVisible(false);\n    setNewTermEng(\"\");\n    setNewTermRus(\"\");\n  };\n\n  const skipHandler = () => {\n    setSkipCounter((prev) => prev + 1);\n    setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n    setSolution([]);\n  };\n\n  const resetHandler = () => {\n    setSolution([]);\n    setSolutionWords(\n      currentExample.eng\n        .split(\" \")\n        .map((el) => {\n          return { value: el, id: currentExample.eng.split(\" \").indexOf(el) };\n        })\n        .sort(function compareFunction(a, b) {\n          if (a.value < b.value) {\n            return -1;\n          }\n          if (a.value > b.value) {\n            return 1;\n          }\n          return 0;\n        })\n    );\n  };\n\n  const visibleHandler = () => {\n    setVisible(true);\n  };\n\n  const answerSwitch = (answerStatus: string) => {\n    switch (answerStatus) {\n      case \"no\":\n        return (\n          <NoAnswerWindow>\n            <h1>Пожалуйста, составьте ответ!</h1>\n          </NoAnswerWindow>\n        );\n      case \"wrong\":\n        return (\n          <WrongAnswerWindow>\n            <h1>Ответ неверный! Попробуйте ещё раз!</h1>\n          </WrongAnswerWindow>\n        );\n      case \"correct\":\n        return (\n          <CorrectAnswerWindow>\n            <h1>Ответ правильный! Отлично!</h1>\n          </CorrectAnswerWindow>\n        );\n    }\n  };\n\n  return (\n    <AppWindow>\n      {visible ? (\n        <NewAddNewExampleWindow\n          mistake={mistake}\n          newTermEng={newTermEng}\n          newTermRus={newTermRus}\n          termRusHandler={termRusHandler}\n          termEngHandler={termEngHandler}\n          addNewExample={addNewExample}\n          cancelAddingNewExample={cancelAddingNewExample}\n        />\n      ) : null}\n      <h3>Переведите данное предложение:</h3>\n      <NewTaskWindow\n        onSkip={skipHandler}\n        currentExample={currentExample}\n        thatsAllFolks={thatsAllFolks}\n        wrongAnswers={wrongAnswers}\n        skipCounter={skipCounter}\n      />\n      {answerSwitch(answerStatus)}\n      <NewSolutionWindow\n        thatsAllFolks={thatsAllFolks}\n        solution={solution}\n        resetHandler={resetHandler}\n        dragHandler={dragHandler}\n        dragOverHandler={dragOverHandler}\n        dragOverWordHandler={dragOverWordHandler}\n        dropHandler={dropHandler}\n        wordSortHandler={wordSortHandler}\n      />\n      <NewWordsWindow\n        solutionWords={solutionWords}\n        dragHandler={dragHandler}\n        dragOverHandler={dragOverHandler}\n        backDropHandler={backDropHandler}\n        dragOverWordHandler={dragOverWordHandler}\n      />\n      <ConfirmButton\n        disabled={thatsAllFolks || answerStatus.length !== 0}\n        onClick={checkSolution}\n      >\n        Проверить\n      </ConfirmButton>\n      <AddNewExampleButton onClick={visibleHandler}>\n        Добавить пример\n      </AddNewExampleButton>\n    </AppWindow>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createClient, Provider } from \"urql\";\n\nconst client = createClient({\n  url: \"http://109.194.37.212:9080/graphql\",\n});\n\nReactDOM.render(\n  <Provider value={client}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}