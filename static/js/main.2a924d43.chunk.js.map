{"version":3,"sources":["App.tsx","index.tsx"],"names":["AppWindow","styled","div","TaskWindow","SolutionWindow","WordsWindow","ConfirmButton","button","Words","AddNewExampleWindow","AddNewExampleButton","NewTextArea","textarea","ConfirmNewExampleButton","DeclineNewExampleButton","ScipButton","ResetButton","App","useState","id","rus","eng","examples","setExamples","getRandomInt","length","currentExample","setCurrentExample","solution","setSolution","hoveredWord","setHoveredWord","solutionWords","setSolutionWords","currentWord","setCurrentWord","thatsAllFolks","setThatsAllFolks","newTermRus","setNewTermRus","newTermEng","setNewTermEng","counter","setCounter","visible","setVisible","useEffect","split","dragHandler","word","dragOverHandler","event","preventDefault","max","Math","floor","random","style","display","value","onChange","target","termRusHandler","maxLength","placeholder","termEngHandler","onClick","prev","alert","newExample","AddNewExample","fontFamily","disabled","filter","ex","onDragOver","onDrop","stopPropagation","includes","currentWordIndex","indexOf","slice","dropHandler","map","sol","draggable","dragOverWordHandler","currentIndex","splice","dropIndex","wordSortHandler","onDrag","backDropHandler","sort","join","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a924d43.chunk.js","sourcesContent":["import React, { ChangeEvent, DragEvent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst AppWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: #fff;\n  margin-top: 20px;\n  border-radius: 50px;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n  text-align: center;\n  position: relative;\n`;\n\nconst TaskWindow = styled.div`\n  width: 360px;\n  height: 100px;\n  background-color: rgba(153, 255, 255, 0.774);\n  margin: 10px auto;\n  font-family: \"TaskFont\";\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n`;\n\nconst SolutionWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(137, 220, 224, 0.568);\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n`;\n\nconst WordsWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(153, 197, 255, 0.774);\n  margin: 10px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n`;\n\nconst ConfirmButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(126, 186, 255, 0.774);\n  }\n  :active {\n    background-color: rgba(96, 170, 255, 0.932);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n  font-family: \"WordsFont\";\n`;\n\nconst AddNewExampleWindow = styled.div`\n  width: 380px;\n  height: 480px;\n  background-color: rgb(147, 255, 156);\n  z-index: 2;\n  margin-top: 10px;\n  margin-left: 10px;\n  box-shadow: 0px 0px 20px rgba(27, 138, 92, 1);\n  border-radius: 30px;\n  position: absolute;\n`;\n\nconst AddNewExampleButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(255, 253, 117, 0.726);\n  }\n  :active {\n    background-color: rgba(255, 251, 23, 0.726);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst NewTextArea = styled.textarea`\n  width: 350px;\n  height: 170px;\n  resize: none;\n  outline: none;\n  border: 2px rgba(7, 116, 31, 0.904) solid;\n  margin-top: 20px;\n  margin-left: 10px;\n  font-family: \"TaskFont\";\n`;\n\nconst ConfirmNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(103, 236, 91, 0.801);\n  }\n  :active {\n    background-color: rgba(43, 211, 28, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst DeclineNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst ScipButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: 55px;\n  right: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: -5px;\n  right: -15px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\nfunction App() {\n  const [examples, setExamples] = useState([\n    {\n      id: 1,\n      rus: \"Вчера сегодня было завтра\",\n      eng: \"Yesterday today was tomorrow\",\n    },\n    {\n      id: 2,\n      rus: \"Рафик сто процентов не виноват\",\n      eng: \"Rafik is not one hundred percent to blame\",\n    },\n    {\n      id: 3,\n      rus: \"Безумно можно быть первым\",\n      eng: \"Its crazy to be the first\",\n    },\n    {\n      id: 4,\n      rus: \"Весь мир в труху - но потом\",\n      eng: \"The whole world is in dust - but then\",\n    },\n    {\n      id: 5,\n      rus: \"У меня плохое предчувствие об этом\",\n      eng: \"I have a bad feeling about this\",\n    },\n    {\n      id: 6,\n      rus: \"Гена Букин наш герой, Гена Букин чемпион\",\n      eng: \"Gena Bukin is our hero, Gena Bukin is a champion\",\n    },\n  ]);\n\n  const [currentExample, setCurrentExample] = useState(\n    examples[getRandomInt(examples.length)]\n  );\n\n  const [solution, setSolution] = useState<Array<string>>([]);\n\n  const [hoveredWord, setHoveredWord] = useState<string>(\"\");\n\n  const [solutionWords, setSolutionWords] = useState<Array<string>>([]);\n\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\n\n  const [thatsAllFolks, setThatsAllFolks] = useState<boolean>(false);\n\n  const [newTermRus, setNewTermRus] = useState<string>(\"\");\n  const [newTermEng, setNewTermEng] = useState<string>(\"\");\n\n  const [counter, setCounter] = useState<number>(100);\n  const [visible, setVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    setSolutionWords(currentExample.eng.split(\" \"));\n  }, [currentExample]);\n  useEffect(() => {\n    if (examples.length !== 0) {\n      setCurrentExample(examples[getRandomInt(examples.length)]);\n    } else {\n      setThatsAllFolks(true);\n      setSolutionWords([]);\n    }\n  }, [examples]);\n  \n  const dragHandler = (word: string) => {\n    setCurrentWord(word);\n  };\n\n  const dragOverHandler = (event: DragEvent) => {\n    event.preventDefault();\n  };\n\n  const dragOverWordHandler = (event: DragEvent, sol: string) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setHoveredWord(sol);\n  };\n\n  const wordSortHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord)) {\n      const currentIndex = solution.indexOf(currentWord);\n      solution.splice(currentIndex, 1);\n      const dropIndex = solution.indexOf(hoveredWord);\n      solution.splice(dropIndex + 1, 0, currentWord);\n      setSolution(\n        solution.map((sol) => {\n          return sol;\n        })\n      );\n    } else {\n    }\n  };\n\n  const dropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord) && solutionWords.includes(currentWord)) {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    } else if (\n      solution.includes(currentWord) &&\n      !solutionWords.includes(currentWord)\n    ) {\n      return solution;\n    } else {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    }\n  };\n\n  const backDropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solutionWords.includes(currentWord) && solution.includes(currentWord)) {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n    } else if (\n      solutionWords.includes(currentWord) &&\n      !solution.includes(currentWord)\n    ) {\n      return solutionWords;\n    } else {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n    }\n  };\n\n  const checkSolution = () => {\n    if (solution.length === 0) {\n      alert(\"Для начала неплохо было бы хотя бы попытаться ответить!\");\n    } else if (solution.join(\" \") === currentExample.eng) {\n      let utterance = new SpeechSynthesisUtterance(currentExample.eng);\n      speechSynthesis.speak(utterance);\n      setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n      setSolution([]);\n      alert(\"Ответ правильный! Отличная работа!\");\n    } else {\n      alert(\"Ответ неверный! Попробуй ещё разок!\");\n    }\n  };\n\n  function getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n\n  const termRusHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermRus(target.value);\n  };\n\n  const termEngHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermEng(target.value);\n  };\n\n  const AddNewExample = () => {\n    setCounter((prev) => prev + 1);\n    if (newTermRus.length === 0 || newTermEng.length === 0) {\n      alert(\"Сначала введите предложения в соответствующие поля!\");\n    }\n    if (newTermRus.length !== 0 && newTermEng.length !== 0) {\n      let newExample = { id: counter, rus: newTermRus, eng: newTermEng };\n      setExamples((prev) => [...prev, newExample]);\n      setVisible(false);\n      setNewTermEng(\"\");\n      setNewTermRus(\"\");\n      setThatsAllFolks(false);\n    }\n  };\n\n  const cancelAddingNewExample = () => {\n    setVisible(false);\n    setNewTermEng(\"\");\n    setNewTermRus(\"\");\n  };\n\n  const skipHandler = () => {\n    setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n    setSolution([]);\n  };\n\n  const resetHandler = () => {\n    setSolution([]);\n    setSolutionWords(currentExample.eng.split(\" \"));\n  };\n\n  return (\n    <div>\n      <AddNewExampleWindow\n        style={visible ? { display: \"block\" } : { display: \"none\" }}\n      >\n        <NewTextArea\n          value={newTermRus}\n          onChange={(event) => termRusHandler(event)}\n          maxLength={150}\n          placeholder=\"Введите предложение на русском (не более 150 символов)\"\n        ></NewTextArea>\n        <NewTextArea\n          value={newTermEng}\n          onChange={(event) => termEngHandler(event)}\n          maxLength={150}\n          placeholder=\"Введите перевод (желательно точный) предложения на английском (не более 150 символов)\"\n        ></NewTextArea>\n        <ConfirmNewExampleButton onClick={() => AddNewExample()}>\n          Подтвердить\n        </ConfirmNewExampleButton>\n        <DeclineNewExampleButton onClick={() => cancelAddingNewExample()}>\n          Отмена\n        </DeclineNewExampleButton>\n      </AddNewExampleWindow>\n      <AppWindow>\n        <h3 style={{ fontFamily: \"TaskFont\" }}>\n          Переведите данное предложение:\n        </h3>\n        <TaskWindow>\n          {thatsAllFolks ? (\n            <p>Задания закончились! Спасибо за участие!</p>\n          ) : (\n            currentExample.rus\n          )}\n          <ScipButton\n            disabled={thatsAllFolks ? true : false}\n            onClick={() => skipHandler()}\n          >\n            Skip\n          </ScipButton>\n        </TaskWindow>\n        <SolutionWindow\n          onDragOver={(event) => dragOverHandler(event)}\n          onDrop={(event) => dropHandler(event)}\n        >\n          <ResetButton\n            disabled={thatsAllFolks || solution.length === 0 ? true : false}\n            onClick={() => resetHandler()}\n          >\n            Reset\n          </ResetButton>\n          {solution.map((sol) => {\n            return (\n              <Words\n                draggable={true}\n                key={Math.random()}\n                // onDragStart={() => dragStartHandler(sol)}\n                onDragOver={(event) => dragOverWordHandler(event, sol)}\n                onDrop={(event) => wordSortHandler(event)}\n                onDrag={() => dragHandler(sol)}\n              >\n                {sol}\n              </Words>\n            );\n          })}\n        </SolutionWindow>\n        <WordsWindow\n          onDragOver={(event) => dragOverHandler(event)}\n          onDrop={(event) => backDropHandler(event)}\n        >\n          {solutionWords.sort().map((ex) => {\n            return (\n              <Words\n                key={Math.random()}\n                draggable={true}\n                // onDragStart={() => dragStartHandler(ex)}\\\n                onDrag={() => dragHandler(ex)}\n              >\n                {ex}\n              </Words>\n            );\n          })}\n        </WordsWindow>\n        <ConfirmButton\n          disabled={thatsAllFolks ? true : false}\n          onClick={checkSolution}\n        >\n          Проверить\n        </ConfirmButton>\n        <AddNewExampleButton onClick={() => setVisible(true)}>\n          Добавить пример\n        </AddNewExampleButton>\n      </AppWindow>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}