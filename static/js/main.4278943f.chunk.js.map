{"version":3,"sources":["Components/AddNewExampleWindow.tsx","Components/SolutionWindow.tsx","Components/TaskWindow.tsx","Components/WordsWindow.tsx","App.tsx","index.tsx"],"names":["AddNewExampleWindow","styled","div","NewTextArea","textarea","ConfirmNewExampleButton","button","DeclineNewExampleButton","NewAddNewExampleWindow","newTermRus","newTermEng","mistake","termEngHandler","termRusHandler","addNewExample","cancelAddingNewExample","value","onChange","event","maxLength","placeholder","onClick","SolutionWindow","Words","ResetButton","NewSolutionWindow","dragOverHandler","dragOverWordHandler","dropHandler","wordSortHandler","resetHandler","dragHandler","thatsAllFolks","solution","onDragOver","onDrop","disabled","length","map","sol","index","draggable","onDrag","toString","TaskWindow","ScipButton","NewTaskWindow","currentExample","onSkip","rus","WordsWindow","NewWordsWindow","backDropHandler","newSolutionWords","solutionWords","word","id","uuidv1","ex","AppWindow","ConfirmButton","AddNewExampleButton","animationForAnswerWindow","keyframes","NoAnswerWindow","WrongAnswerWindow","CorrectAnswerWindow","App","useState","eng","examples","setExamples","Math","floor","random","setCurrentExample","answerStatus","setAnswerStatus","setSolution","hoveredWord","setHoveredWord","setSolutionWords","currentWord","setCurrentWord","setThatsAllFolks","setNewTermRus","setNewTermEng","counter","setCounter","visible","setVisible","setMistake","setUpdated","useEffect","split","sort","setTimeout","prev","preventDefault","target","newExample","style","fontFamily","filter","answerSwitch","stopPropagation","includes","currentWordIndex","indexOf","slice","currentIndex","splice","dropIndex","join","utterance","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","voice","speak","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4278943f.chunk.js","sourcesContent":["import React, { ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nconst AddNewExampleWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: rgb(147, 255, 156);\n  z-index: 2;\n  margin-left: 50%;\n  left: -200px;\n  box-shadow: 0px 0px 20px rgb(27, 138, 92);\n  border-radius: 30px;\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst NewTextArea = styled.textarea`\n  width: 350px;\n  height: 170px;\n  resize: none;\n  outline: none;\n  border: 2px rgba(7, 116, 31, 0.9) solid;\n  margin-top: 20px;\n  margin-left: 20px;\n`;\n\nconst ConfirmNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(103, 236, 91, 0.801);\n  }\n  :active {\n    background-color: rgba(43, 211, 28, 0.801);\n  }\n`;\n\nconst DeclineNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\ntype AddNewExampleWindowProps = {\n  mistake: boolean;\n  newTermRus: string;\n  newTermEng: string;\n  termRusHandler(event: ChangeEvent): void;\n  termEngHandler(event: ChangeEvent): void;\n  addNewExample(): void;\n  cancelAddingNewExample(): void;\n};\n\nconst NewAddNewExampleWindow: React.FC<AddNewExampleWindowProps> = ({\n  newTermRus,\n  newTermEng,\n  mistake,\n  termEngHandler,\n  termRusHandler,\n  addNewExample,\n  cancelAddingNewExample,\n}) => {\n  return (\n    <AddNewExampleWindow>\n      <NewTextArea\n        value={newTermRus}\n        onChange={(event) => termRusHandler(event)}\n        maxLength={150}\n        placeholder=\"Введите предложение на русском (не более 150 символов)\"\n      ></NewTextArea>\n      <NewTextArea\n        value={newTermEng}\n        onChange={(event) => termEngHandler(event)}\n        maxLength={150}\n        placeholder=\"Введите перевод (желательно точный) предложения на английском (не более 150 символов)\"\n      ></NewTextArea>\n      <ConfirmNewExampleButton onClick={() => addNewExample()}>\n        {mistake ? \"Заполните поля!\" : \"Добавить\"}\n      </ConfirmNewExampleButton>\n      <DeclineNewExampleButton onClick={() => cancelAddingNewExample()}>\n        Отмена\n      </DeclineNewExampleButton>\n    </AddNewExampleWindow>\n  );\n};\n\nexport default NewAddNewExampleWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SolutionWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(137, 220, 224, 0.568);\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n  box-sizing: border-box;\n`;\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: -5px;\n  right: -15px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\ntype NewSolutionWindowProps = {\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  dropHandler(event: React.DragEvent<Element>): void;\n  wordSortHandler(event: React.DragEvent<Element>): void;\n  dragOverWordHandler(event: React.DragEvent<Element>, sol: string): void;\n  resetHandler(): void;\n  dragHandler(sol: string): void;\n  thatsAllFolks: boolean;\n  solution: string[];\n};\n\nconst NewSolutionWindow: React.FC<NewSolutionWindowProps> = ({\n  dragOverHandler,\n  dragOverWordHandler,\n  dropHandler,\n  wordSortHandler,\n  resetHandler,\n  dragHandler,\n  thatsAllFolks,\n  solution,\n}) => {\n  return (\n    <SolutionWindow\n      onDragOver={(event) => dragOverHandler(event)}\n      onDrop={(event) => dropHandler(event)}\n    >\n      <ResetButton\n        disabled={thatsAllFolks || solution.length === 0}\n        onClick={() => resetHandler()}\n      >\n        Reset\n      </ResetButton>\n      {solution.map((sol: string, index: number) => (\n        <Words\n          draggable={true}\n          key={sol.toString() + index.toString()}\n          onDragOver={(event) => dragOverWordHandler(event, sol)}\n          onDrop={(event) => wordSortHandler(event)}\n          onDrag={() => dragHandler(sol)}\n        >\n          {sol}\n        </Words>\n      ))}\n    </SolutionWindow>\n  );\n};\n\nexport default NewSolutionWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TaskWindow = styled.div`\n  width: 360px;\n  height: 100px;\n  background-color: rgba(153, 255, 255, 0.774);\n  margin: 10px auto;\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  box-sizing: border-box;\n`;\n\nconst ScipButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: 55px;\n  right: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n`;\n\ntype TaskWindowProps = {\n  thatsAllFolks: boolean;\n  currentExample: { id: number; rus: string; eng: string };\n  onSkip(): void;\n};\n\nconst NewTaskWindow: React.FC<TaskWindowProps> = ({\n  thatsAllFolks,\n  currentExample,\n  onSkip,\n}) => {\n  return (\n    <TaskWindow>\n      {thatsAllFolks ? (\n        <p>Задания закончились! Спасибо за участие!</p>\n      ) : (\n        currentExample.rus\n      )}\n      <ScipButton\n        disabled={thatsAllFolks ? true : false}\n        onClick={() => onSkip()}\n      >\n        Skip\n      </ScipButton>\n    </TaskWindow>\n  );\n};\n\nexport default NewTaskWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FlipMove from \"react-flip-move\"\nimport { v1 as uuidv1 } from 'uuid';\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n`;\n\nconst WordsWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(153, 197, 255, 0.774);\n  margin: 10px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n  box-sizing: border-box;\n`;\n\ntype newWordsWindowProps = {\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  backDropHandler(event: React.DragEvent<Element>): void;\n  dragHandler(ex: string): void;\n  solutionWords: string[];\n};\n\nconst NewWordsWindow: React.FC<newWordsWindowProps> = ({\n  dragHandler,\n  dragOverHandler,\n  backDropHandler,\n  solutionWords,\n}) => {\n\n  let newSolutionWords = solutionWords.map(word => {return {value: word, id: uuidv1()}})\n\n  return (\n    <WordsWindow\n      onDragOver={(event) => dragOverHandler(event)}\n      onDrop={(event) => backDropHandler(event)}\n    >\n      <FlipMove>\n        {newSolutionWords.map((ex) => {\n          return (\n            <Words key={ex.value} draggable={true} onDrag={() => dragHandler(ex.value)}>\n              {ex.id}\n            </Words>\n          );\n        })}\n      </FlipMove>\n    </WordsWindow>\n  );\n};\n\nexport default NewWordsWindow;\n","import React, { ChangeEvent, DragEvent, useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport NewAddNewExampleWindow from \"./Components/AddNewExampleWindow\";\nimport NewSolutionWindow from \"./Components/SolutionWindow\";\nimport NewTaskWindow from \"./Components/TaskWindow\";\nimport NewWordsWindow from \"./Components/WordsWindow\";\n\nconst AppWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: rgba(233, 233, 233, 0.8);\n  margin-top: 20px;\n  margin-left: 50%;\n  left: -200px;\n  border-radius: 50px;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n  text-align: center;\n`;\n\nconst ConfirmButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(126, 186, 255, 0.774);\n  }\n  :active {\n    background-color: rgba(96, 170, 255, 0.932);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst AddNewExampleButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(255, 253, 117, 0.726);\n  }\n  :active {\n    background-color: rgba(255, 251, 23, 0.726);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst animationForAnswerWindow = keyframes`\nfrom {\n  opacity: 0;\n  margin-left: 350px;\n}\nto {\n  opacity: 0;\n  margin-left: -350px;\n}\n50% {\n  opacity: 1;\n  margin-left: 0px;\n}\n`;\n\nconst NoAnswerWindow = styled.div`\n  width: 300px;\n  height: 100px;\n  background-color: rgba(66, 226, 213, 0.8);\n  font-size: 15px;\n  color: #fff;\n  display: flex;\n  margin-top: 10px;\n  left: 50px;\n  z-index: 2;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  box-sizing: border-box;\n  border-radius: 40px;\n  position: absolute;\n  animation: ${animationForAnswerWindow} 3s forwards;\n  opacity: 0;\n`;\nconst WrongAnswerWindow = styled(NoAnswerWindow)`\n  background-color: rgba(206, 76, 76, 0.8);\n  color: rgb(110, 11, 11);\n  font-size: 15px;\n`;\nconst CorrectAnswerWindow = styled(NoAnswerWindow)`\n  background-color: rgba(75, 221, 55, 0.8);\n  color: rgb(18, 94, 8);\n`;\n\nfunction App() {\n  const [examples, setExamples] = useState([\n    {\n      id: 1,\n      rus: \"Вчера сегодня было завтра\",\n      eng: \"Yesterday today was tomorrow\",\n    },\n    {\n      id: 2,\n      rus: \"Рафик сто процентов не виноват\",\n      eng: \"Rafik is not one hundred percent to blame\",\n    },\n    {\n      id: 3,\n      rus: \"Безумно можно быть первым\",\n      eng: \"Its crazy to be the first\",\n    },\n    {\n      id: 4,\n      rus: \"Весь мир в труху - но потом\",\n      eng: \"The whole world is in dust - but then\",\n    },\n    {\n      id: 5,\n      rus: \"У меня плохое предчувствие об этом\",\n      eng: \"I have a bad feeling about this\",\n    },\n    {\n      id: 6,\n      rus: \"А потом назвали меня как тот самолёт, который был турецкий\",\n      eng: \"And then they named me like that plane, which was Turkish\",\n    },\n  ]);\n\n  const [currentExample, setCurrentExample] = useState(\n    examples[Math.floor(Math.random() * examples.length)]\n  );\n\n  const [answerStatus, setAnswerStatus] = useState<string>(\"\");\n\n  const [solution, setSolution] = useState<Array<string>>([]);\n\n  const [hoveredWord, setHoveredWord] = useState<string>(\"\");\n\n  const [solutionWords, setSolutionWords] = useState<Array<string>>([]);\n\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\n\n  const [thatsAllFolks, setThatsAllFolks] = useState<boolean>(false);\n\n  const [newTermRus, setNewTermRus] = useState<string>(\"\");\n\n  const [newTermEng, setNewTermEng] = useState<string>(\"\");\n\n  const [counter, setCounter] = useState<number>(100);\n\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const [mistake, setMistake] = useState<boolean>(false);\n\n  const [updated, setUpdated] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (examples.length !== 0) {\n      setCurrentExample(examples[Math.floor(Math.random() * examples.length)]);\n    } else {\n      setThatsAllFolks(true);\n      setSolutionWords([]);\n    }\n  }, [examples]);\n  useEffect(() => {\n    setSolutionWords(currentExample.eng.split(\" \").sort());\n  }, [currentExample]);\n  useEffect(() => {\n    setTimeout(() => {\n      setUpdated((prev) => (prev = !prev));\n    }, 1000);\n  }, [solutionWords]);\n\n  const dragHandler = (word: string) => {\n    setCurrentWord(word);\n  };\n\n  const dragOverHandler = (event: DragEvent) => {\n    event.preventDefault();\n  };\n\n  const dragOverWordHandler = (event: DragEvent, sol: string) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setHoveredWord(sol);\n  };\n\n  const wordSortHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord)) {\n      const currentIndex = solution.indexOf(currentWord);\n      solution.splice(currentIndex, 1);\n      const dropIndex = solution.indexOf(hoveredWord);\n      solution.splice(dropIndex + 1, 0, currentWord);\n      setSolution(\n        solution.map((sol) => {\n          return sol;\n        })\n      );\n    } else {\n    }\n  };\n\n  const dropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord) && solutionWords.includes(currentWord)) {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    } else if (\n      solution.includes(currentWord) &&\n      !solutionWords.includes(currentWord)\n    ) {\n      return solution;\n    } else {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    }\n  };\n\n  const backDropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solutionWords.includes(currentWord) && solution.includes(currentWord)) {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n      setTimeout(() => {\n        setSolutionWords((prev) => prev.sort());\n      }, 500);\n    } else if (\n      solutionWords.includes(currentWord) &&\n      !solution.includes(currentWord)\n    ) {\n      return solutionWords;\n    } else {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n      setTimeout(() => {\n        setSolutionWords((prev) => prev.sort());\n      }, 500);\n    }\n  };\n\n  const checkSolution = () => {\n    if (solution.length === 0) {\n      setAnswerStatus(\"no\");\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    } else if (solution.join(\" \") === currentExample.eng) {\n      let utterance = new SpeechSynthesisUtterance(currentExample.eng);\n      let voices = window.speechSynthesis.getVoices();\n      utterance.voice = voices[2];\n      speechSynthesis.speak(utterance);\n      setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n      setSolution([]);\n      setAnswerStatus(\"correct\");\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    } else {\n      setAnswerStatus(\"wrong\");\n      setTimeout(() => {\n        setAnswerStatus(\"\");\n      }, 3000);\n    }\n  };\n\n  const termRusHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermRus(target.value);\n  };\n\n  const termEngHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermEng(target.value);\n  };\n\n  const addNewExample = () => {\n    setCounter((prev) => prev + 1);\n    if (newTermRus.length === 0 || newTermEng.length === 0) {\n      setMistake(true);\n      setTimeout(() => {\n        setMistake(false);\n      }, 1000);\n    }\n    if (newTermRus.length !== 0 && newTermEng.length !== 0) {\n      let newExample = { id: counter, rus: newTermRus, eng: newTermEng };\n      setExamples((prev) => [...prev, newExample]);\n      setSolution([]);\n      setVisible(false);\n      setNewTermEng(\"\");\n      setNewTermRus(\"\");\n      setThatsAllFolks(false);\n    }\n  };\n\n  const cancelAddingNewExample = () => {\n    setVisible(false);\n    setNewTermEng(\"\");\n    setNewTermRus(\"\");\n  };\n\n  const skipHandler = () => {\n    setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n    setSolution([]);\n  };\n\n  const resetHandler = () => {\n    setSolution([]);\n    setSolutionWords(currentExample.eng.split(\" \").sort());\n  };\n\n  const visibleHandler = () => {\n    setVisible(true);\n  };\n\n  const answerSwitch = (answerStatus: string) => {\n    switch (answerStatus) {\n      case \"no\":\n        return (\n          <NoAnswerWindow>\n            <h1>Пожалуйста, составьте ответ!</h1>\n          </NoAnswerWindow>\n        );\n      case \"wrong\":\n        return (\n          <WrongAnswerWindow>\n            <h1>Ответ неверный! Попробуйте ещё раз!</h1>\n          </WrongAnswerWindow>\n        );\n      case \"correct\":\n        return (\n          <CorrectAnswerWindow>\n            <h1>Ответ правильный! Отлично!</h1>\n          </CorrectAnswerWindow>\n        );\n    }\n  };\n\n  return (\n    <div>\n      {visible ? (\n        <NewAddNewExampleWindow\n          mistake={mistake}\n          newTermEng={newTermEng}\n          newTermRus={newTermRus}\n          termRusHandler={termRusHandler}\n          termEngHandler={termEngHandler}\n          addNewExample={addNewExample}\n          cancelAddingNewExample={cancelAddingNewExample}\n        />\n      ) : null}\n      <AppWindow>\n        <h3 style={{ fontFamily: \"TaskFont\" }}>\n          Переведите данное предложение:\n        </h3>\n        <NewTaskWindow\n          onSkip={skipHandler}\n          currentExample={currentExample}\n          thatsAllFolks={thatsAllFolks}\n        />\n        {answerSwitch(answerStatus)}\n        <NewSolutionWindow\n          thatsAllFolks={thatsAllFolks}\n          solution={solution}\n          resetHandler={resetHandler}\n          dragHandler={dragHandler}\n          dragOverHandler={dragOverHandler}\n          dragOverWordHandler={dragOverWordHandler}\n          dropHandler={dropHandler}\n          wordSortHandler={wordSortHandler}\n        />\n        <NewWordsWindow\n          solutionWords={solutionWords}\n          dragHandler={dragHandler}\n          dragOverHandler={dragOverHandler}\n          backDropHandler={backDropHandler}\n        />\n        <ConfirmButton\n          disabled={thatsAllFolks || answerStatus.length !== 0}\n          onClick={checkSolution}\n        >\n          Проверить\n        </ConfirmButton>\n        <AddNewExampleButton onClick={() => visibleHandler()}>\n          {updated ? \"Добавить пример\" : \"Добавить пример\"}\n        </AddNewExampleButton>\n      </AppWindow>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}