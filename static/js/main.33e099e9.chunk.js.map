{"version":3,"sources":["Components/AddNewExampleWindow.tsx","Components/SolutionWindow.tsx","Components/TaskWindow.tsx","Components/WordsWindow.tsx","App.tsx","index.tsx"],"names":["AddNewExampleWindow","styled","div","NewTextArea","textarea","ConfirmNewExampleButton","button","DeclineNewExampleButton","NewAddNewExampleWindow","visible","newTermRus","newTermEng","termEngHandler","termRusHandler","addNewExample","cancelAddingNewExample","style","display","value","onChange","event","maxLength","placeholder","onClick","SolutionWindow","Words","ResetButton","NewSolutionWindow","dragOverHandler","dragOverWordHandler","dropHandler","wordSortHandler","resetHandler","dragHandler","thatsAllFolks","solution","onDragOver","onDrop","disabled","length","map","sol","draggable","onDrag","Math","random","TaskWindow","ScipButton","NewTaskWindow","currentExample","onSkip","rus","WordsWindow","NewWordsWindow","backDropHandler","solutionWords","sort","ex","AppWindow","ConfirmButton","AddNewExampleButton","App","useState","id","eng","examples","setExamples","getRandomInt","setCurrentExample","setSolution","hoveredWord","setHoveredWord","setSolutionWords","currentWord","setCurrentWord","setThatsAllFolks","setNewTermRus","setNewTermEng","counter","setCounter","setVisible","useEffect","split","word","preventDefault","max","floor","target","prev","alert","newExample","fontFamily","filter","stopPropagation","includes","currentWordIndex","indexOf","slice","currentIndex","splice","dropIndex","join","utterance","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","voice","speak","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33e099e9.chunk.js","sourcesContent":["import React, { ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nconst AddNewExampleWindow = styled.div`\n  width: 380px;\n  height: 480px;\n  background-color: rgb(147, 255, 156);\n  z-index: 2;\n  margin-top: 10px;\n  margin-left: 10px;\n  box-shadow: 0px 0px 20px rgba(27, 138, 92, 1);\n  border-radius: 30px;\n  position: absolute;\n`;\n\nconst NewTextArea = styled.textarea`\n  width: 350px;\n  height: 170px;\n  resize: none;\n  outline: none;\n  border: 2px rgba(7, 116, 31, 0.904) solid;\n  margin-top: 20px;\n  margin-left: 10px;\n  font-family: \"TaskFont\";\n`;\n\nconst ConfirmNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(103, 236, 91, 0.801);\n  }\n  :active {\n    background-color: rgba(43, 211, 28, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst DeclineNewExampleButton = styled.button`\n  width: 180px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\ntype AddNewExampleWindowProps = {\n  visible: boolean;\n  newTermRus: string;\n  newTermEng: string;\n  termRusHandler(event: ChangeEvent): void;\n  termEngHandler(event: ChangeEvent): void;\n  addNewExample(): void;\n  cancelAddingNewExample(): void;\n};\n\nconst NewAddNewExampleWindow: React.FC<AddNewExampleWindowProps> = ({\n  visible,\n  newTermRus,\n  newTermEng,\n  termEngHandler,\n  termRusHandler,\n  addNewExample,\n  cancelAddingNewExample,\n}) => {\n  return (\n    <AddNewExampleWindow\n      style={visible ? { display: \"block\" } : { display: \"none\" }}\n    >\n      <NewTextArea\n        value={newTermRus}\n        onChange={(event) => termRusHandler(event)}\n        maxLength={150}\n        placeholder=\"Введите предложение на русском (не более 150 символов)\"\n      ></NewTextArea>\n      <NewTextArea\n        value={newTermEng}\n        onChange={(event) => termEngHandler(event)}\n        maxLength={150}\n        placeholder=\"Введите перевод (желательно точный) предложения на английском (не более 150 символов)\"\n      ></NewTextArea>\n      <ConfirmNewExampleButton onClick={() => addNewExample()}>\n        Подтвердить\n      </ConfirmNewExampleButton>\n      <DeclineNewExampleButton onClick={() => cancelAddingNewExample()}>\n        Отмена\n      </DeclineNewExampleButton>\n    </AddNewExampleWindow>\n  );\n};\n\nexport default NewAddNewExampleWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SolutionWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(137, 220, 224, 0.568);\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n`;\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n  font-family: \"WordsFont\";\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: -5px;\n  right: -15px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\ntype NewSolutionWindowProps = {\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  dropHandler(event: React.DragEvent<Element>): void;\n  wordSortHandler(event: React.DragEvent<Element>): void;\n  dragOverWordHandler(event: React.DragEvent<Element>, sol: string): void;\n  resetHandler(): void;\n  dragHandler(sol: string): void;\n  thatsAllFolks: boolean;\n  solution: string[];\n};\n\nconst NewSolutionWindow: React.FC<NewSolutionWindowProps> = ({\n  dragOverHandler,\n  dragOverWordHandler,\n  dropHandler,\n  wordSortHandler,\n  resetHandler,\n  dragHandler,\n  thatsAllFolks,\n  solution,\n}) => {\n  return (\n    <SolutionWindow\n      onDragOver={(event) => dragOverHandler(event)}\n      onDrop={(event) => dropHandler(event)}\n    >\n      <ResetButton\n        disabled={thatsAllFolks || solution.length === 0 ? true : false}\n        onClick={() => resetHandler()}\n      >\n        Reset\n      </ResetButton>\n      {solution.map((sol) => {\n        return (\n          <Words\n            draggable={true}\n            key={Math.random()}\n            // onDragStart={() => dragStartHandler(sol)}\n            onDragOver={(event) => dragOverWordHandler(event, sol)}\n            onDrop={(event) => wordSortHandler(event)}\n            onDrag={() => dragHandler(sol)}\n          >\n            {sol}\n          </Words>\n        );\n      })}\n    </SolutionWindow>\n  );\n};\n\nexport default NewSolutionWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TaskWindow = styled.div`\n  width: 360px;\n  height: 100px;\n  background-color: rgba(153, 255, 255, 0.774);\n  margin: 10px auto;\n  font-family: \"TaskFont\";\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n`;\n\nconst ScipButton = styled.button`\n  position: absolute;\n  width: 50px;\n  height: 20px;\n  background-color: rgba(143, 79, 79, 0.329);\n  top: 55px;\n  right: 5px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(240, 87, 87, 0.801);\n  }\n  :active {\n    background-color: rgba(221, 25, 25, 0.801);\n  }\n  font-family: \"TaskFont\";\n`;\n\ntype TaskWindowProps = {\n  thatsAllFolks: boolean;\n  currentExample: { id: number; rus: string; eng: string };\n  onSkip(): void;\n};\n\nconst NewTaskWindow: React.FC<TaskWindowProps> = ({\n  thatsAllFolks,\n  currentExample,\n  onSkip,\n}) => {\n  return (\n    <TaskWindow>\n      {thatsAllFolks ? (\n        <p>Задания закончились! Спасибо за участие!</p>\n      ) : (\n        currentExample.rus\n      )}\n      <ScipButton\n        disabled={thatsAllFolks ? true : false}\n        onClick={() => onSkip()}\n      >\n        Skip\n      </ScipButton>\n    </TaskWindow>\n  );\n};\n\nexport default NewTaskWindow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Words = styled.div`\n  position: relative;\n  width: 80px;\n  height: 20px;\n  background-color: #fff;\n  display: inline-block;\n  margin: 5px;\n  cursor: grab;\n  border-radius: 5px;\n  text-align: center;\n  :hover {\n    background-color: rgba(119, 239, 255, 0.651);\n  }\n  :active {\n    background-color: rgba(1, 225, 255, 0.651);\n  }\n  font-family: \"WordsFont\";\n`;\n\nconst WordsWindow = styled.div`\n  width: 360px;\n  height: 125px;\n  background-color: rgba(153, 197, 255, 0.774);\n  margin: 10px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  position: relative;\n`;\n\ntype newWordsWindowProps = {\n  dragOverHandler(event: React.DragEvent<Element>): void;\n  backDropHandler(event: React.DragEvent<Element>): void;\n  dragHandler(ex: string): void;\n  solutionWords: string[];\n};\n\nconst NewWordsWindow: React.FC<newWordsWindowProps> = ({\n  dragHandler,\n  dragOverHandler,\n  backDropHandler,\n  solutionWords,\n}) => {\n  return (\n    <WordsWindow\n      onDragOver={(event) => dragOverHandler(event)}\n      onDrop={(event) => backDropHandler(event)}\n    >\n      {solutionWords.sort().map((ex) => {\n        return (\n          <Words\n            key={Math.random()}\n            draggable={true}\n            onDrag={() => dragHandler(ex)}\n          >\n            {ex}\n          </Words>\n        );\n      })}\n    </WordsWindow>\n  );\n};\n\nexport default NewWordsWindow;\n","import React, { ChangeEvent, DragEvent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport NewAddNewExampleWindow from \"./Components/AddNewExampleWindow\";\nimport NewSolutionWindow from \"./Components/SolutionWindow\";\nimport NewTaskWindow from \"./Components/TaskWindow\";\nimport NewWordsWindow from \"./Components/WordsWindow\";\n\nconst AppWindow = styled.div`\n  width: 400px;\n  height: 500px;\n  background-color: #fff;\n  margin-top: 20px;\n  border-radius: 50px;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n  text-align: center;\n  position: relative;\n`;\n\nconst ConfirmButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(126, 186, 255, 0.774);\n  }\n  :active {\n    background-color: rgba(96, 170, 255, 0.932);\n  }\n  font-family: \"TaskFont\";\n`;\n\nconst AddNewExampleButton = styled.button`\n  width: 150px;\n  height: 50px;\n  background-color: #ccc;\n  margin: 0 10px;\n  border-radius: 50px;\n  outline: none;\n  border: none;\n  :hover {\n    background-color: rgba(255, 253, 117, 0.726);\n  }\n  :active {\n    background-color: rgba(255, 251, 23, 0.726);\n  }\n  font-family: \"TaskFont\";\n`;\n\nfunction App() {\n  const [examples, setExamples] = useState([\n    {\n      id: 1,\n      rus: \"Вчера сегодня было завтра\",\n      eng: \"Yesterday today was tomorrow\",\n    },\n    {\n      id: 2,\n      rus: \"Рафик сто процентов не виноват\",\n      eng: \"Rafik is not one hundred percent to blame\",\n    },\n    {\n      id: 3,\n      rus: \"Безумно можно быть первым\",\n      eng: \"Its crazy to be the first\",\n    },\n    {\n      id: 4,\n      rus: \"Весь мир в труху - но потом\",\n      eng: \"The whole world is in dust - but then\",\n    },\n    {\n      id: 5,\n      rus: \"У меня плохое предчувствие об этом\",\n      eng: \"I have a bad feeling about this\",\n    },\n    {\n      id: 6,\n      rus: \"А потом назвали меня как тот самолёт, который был турецкий\",\n      eng: \"And then they named me like that plane, which was Turkish\",\n    },\n  ]);\n\n  const [currentExample, setCurrentExample] = useState(\n    examples[getRandomInt(examples.length)]\n  );\n\n  const [solution, setSolution] = useState<Array<string>>([]);\n\n  const [hoveredWord, setHoveredWord] = useState<string>(\"\");\n\n  const [solutionWords, setSolutionWords] = useState<Array<string>>([]);\n\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\n\n  const [thatsAllFolks, setThatsAllFolks] = useState<boolean>(false);\n\n  const [newTermRus, setNewTermRus] = useState<string>(\"\");\n  const [newTermEng, setNewTermEng] = useState<string>(\"\");\n\n  const [counter, setCounter] = useState<number>(100);\n  const [visible, setVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    setSolutionWords(currentExample.eng.split(\" \"));\n  }, [currentExample]);\n  useEffect(() => {\n    if (examples.length !== 0) {\n      setCurrentExample(examples[getRandomInt(examples.length)]);\n    } else {\n      setThatsAllFolks(true);\n      setSolutionWords([]);\n    }\n  }, [examples]);\n\n  const dragHandler = (word: string) => {\n    setCurrentWord(word);\n  };\n\n  const dragOverHandler = (event: DragEvent) => {\n    event.preventDefault();\n  };\n\n  const dragOverWordHandler = (event: DragEvent, sol: string) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setHoveredWord(sol);\n  };\n\n  const wordSortHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord)) {\n      const currentIndex = solution.indexOf(currentWord);\n      solution.splice(currentIndex, 1);\n      const dropIndex = solution.indexOf(hoveredWord);\n      solution.splice(dropIndex + 1, 0, currentWord);\n      setSolution(\n        solution.map((sol) => {\n          return sol;\n        })\n      );\n    } else {\n    }\n  };\n\n  const dropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solution.includes(currentWord) && solutionWords.includes(currentWord)) {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    } else if (\n      solution.includes(currentWord) &&\n      !solutionWords.includes(currentWord)\n    ) {\n      return solution;\n    } else {\n      setSolution((prev) => [...prev, currentWord]);\n      let currentWordIndex = solutionWords.indexOf(currentWord);\n      setSolutionWords((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n    }\n  };\n\n  const backDropHandler = (event: DragEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    if (solutionWords.includes(currentWord) && solution.includes(currentWord)) {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n    } else if (\n      solutionWords.includes(currentWord) &&\n      !solution.includes(currentWord)\n    ) {\n      return solutionWords;\n    } else {\n      let currentWordIndex = solution.indexOf(currentWord);\n      setSolution((prev) => [\n        ...prev.slice(0, currentWordIndex),\n        ...prev.slice(currentWordIndex + 1, prev.length),\n      ]);\n      setSolutionWords((prev) => [...prev, currentWord]);\n    }\n  };\n\n  const checkSolution = () => {\n    if (solution.length === 0) {\n      alert(\"Для начала неплохо было бы хотя бы попытаться ответить!\");\n    } else if (solution.join(\" \") === currentExample.eng) {\n      let utterance = new SpeechSynthesisUtterance(currentExample.eng);\n      let voices = window.speechSynthesis.getVoices();\n      utterance.voice = voices[2];\n      speechSynthesis.speak(utterance);\n      setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n      setSolution([]);\n      alert(\"Ответ правильный! Отличная работа!\");\n    } else {\n      alert(\"Ответ неверный! Попробуй ещё разок!\");\n    }\n  };\n\n  function getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n\n  const termRusHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermRus(target.value);\n  };\n\n  const termEngHandler = (event: ChangeEvent) => {\n    let target = event.target as HTMLInputElement;\n    setNewTermEng(target.value);\n  };\n\n  const addNewExample = () => {\n    setCounter((prev) => prev + 1);\n    if (newTermRus.length === 0 || newTermEng.length === 0) {\n      alert(\"Сначала введите предложения в соответствующие поля!\");\n    }\n    if (newTermRus.length !== 0 && newTermEng.length !== 0) {\n      let newExample = { id: counter, rus: newTermRus, eng: newTermEng };\n      setExamples((prev) => [...prev, newExample]);\n      setSolution([]);\n      setVisible(false);\n      setNewTermEng(\"\");\n      setNewTermRus(\"\");\n      setThatsAllFolks(false);\n    }\n  };\n\n  const cancelAddingNewExample = () => {\n    setVisible(false);\n    setNewTermEng(\"\");\n    setNewTermRus(\"\");\n  };\n\n  const skipHandler = () => {\n    setExamples((prev) => prev.filter((ex) => ex.id !== currentExample.id));\n    setSolution([]);\n  };\n\n  const resetHandler = () => {\n    setSolution([]);\n    setSolutionWords(currentExample.eng.split(\" \"));\n  };\n\n  return (\n    <div>\n      <NewAddNewExampleWindow\n        visible={visible}\n        newTermEng={newTermEng}\n        newTermRus={newTermRus}\n        termRusHandler={termRusHandler}\n        termEngHandler={termEngHandler}\n        addNewExample={addNewExample}\n        cancelAddingNewExample={cancelAddingNewExample}\n      />\n      <AppWindow>\n        <h3 style={{ fontFamily: \"TaskFont\" }}>\n          Переведите данное предложение:\n        </h3>\n        <NewTaskWindow\n          onSkip={skipHandler}\n          currentExample={currentExample}\n          thatsAllFolks={thatsAllFolks}\n        />\n        <NewSolutionWindow\n          thatsAllFolks={thatsAllFolks}\n          solution={solution}\n          resetHandler={resetHandler}\n          dragHandler={dragHandler}\n          dragOverHandler={dragOverHandler}\n          dragOverWordHandler={dragOverWordHandler}\n          dropHandler={dropHandler}\n          wordSortHandler={wordSortHandler}\n        />\n        <NewWordsWindow\n          solutionWords={solutionWords}\n          dragHandler={dragHandler}\n          dragOverHandler={dragOverHandler}\n          backDropHandler={backDropHandler}\n        />\n        <ConfirmButton\n          disabled={thatsAllFolks ? true : false}\n          onClick={checkSolution}\n        >\n          Проверить\n        </ConfirmButton>\n        <AddNewExampleButton onClick={() => setVisible(true)}>\n          Добавить пример\n        </AddNewExampleButton>\n      </AppWindow>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}